#include<bits/stdc++.h>
using namespace std;

 struct Node{
        int data;
        Node* left,*right;
        Node(int val)
        {
            data=val;
            left=nullptr,right=nullptr;
        }
    };
    struct cmp{
        bool operator()(Node*l,Node*r)
        {
            return l->data > r->data;
        }
    };
    void preOrder(Node* root,string s,vector<string>&ans)
    {
        if(!root)
        {
            
            return ;
        }
        if(!root-> right && !root->left)
        {
            ans.push_back(s);
            
        }
        preOrder(root->left,s+"0",ans);
        preOrder(root->right,s+"1",ans);
    }
	
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    priority_queue<Node*,vector<Node*>,cmp> q;
		    for(int i=0;i<N;i++)
		    {
		        Node * n=new Node(f[i]);
		        q.push(n);
		    }
		    //building huffman tree
		    while(q.size()!=1)
		    {
		        Node* l=q.top();
		        q.pop();
		        Node *r=q.top();
		        q.pop();
		        Node *newNode=new Node(l->data+r->data);
		        newNode->left=l,newNode->right=r;
		        q.push(newNode);
		    }
		    Node * root=q.top();
		    vector<string> ans;
		    string s;
		    preOrder(root,s,ans);
		    return ans;
		}
int main() {
    string inp="abcdef";
    vector<int> frequency={5, 9, 12, 13, 16, 45};
    vector<string> ans=huffmanCodes(inp,frequency,6);
    for(auto str:ans)cout<<str<<" ";
}
